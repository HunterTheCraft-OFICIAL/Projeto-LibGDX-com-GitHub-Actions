name: Build LibGDX Environment

on: [push] # Ou outro evento que você preferir (por exemplo, workflow_dispatch para execução manual)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17' # Ou outra versão compatível

    - name: Download LibGDX Liftoff
      run: wget https://github.com/libgdx/libgdx/releases/download/1.13.1/gdx-liftoff-1.13.1.jar # Use a versão mais recente

    - name: Make script executable
      run: chmod +x build_env.sh

    - name: Run build script
      id: build_script
      run: ./build_env.sh

    - name: Upload Project ZIP (se criado)
      if: steps.build_script.outcome == 'success' && steps.build_script.outputs.LOG_FILE == '' && -f meu-jogo-libgdx.zip
      uses: actions/upload-artifact@v4
      with:
        name: project-zip
        path: meu-jogo-libgdx.zip

    - name: Upload APK ZIP (se gerado)
      if: steps.build_script.outcome == 'success' && steps.build_script.outputs.LOG_FILE == '' && -f meu-jogo-debug.apk.zip
      uses: actions/upload-artifact@v4
      with:
        name: apk-zip
        path: meu-jogo-debug.apk.zip

    - name: Upload Logs
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: build.log

    - name: Create Release (with Logs)
      if: always() # Executa sempre, mesmo que as etapas anteriores falhem
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_id }}
        release_name: Build Log - ${{ github.run_id }}
        body: |
          Logs da execução do workflow: ${{ github.run_id }}
        draft: false
        prerelease: true
        artifacts: build.log