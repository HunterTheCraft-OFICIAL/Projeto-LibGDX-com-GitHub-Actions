name: Build LibGDX Project

on:
  push:
    branches: [ main ] # Gatilho em push para a branch main
  workflow_dispatch: # Permite gatilho manual

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: # Permissões necessárias para upload de artefatos
      contents: read
      # actions: write # Não necessário para upload-artifact v4

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: . # Diretório onde está o Dockerfile
          file: ./Dockerfile # Caminho para o Dockerfile
          push: false # Não envia para um registry
          load: true # Carrega a imagem localmente para ser usada nos próximos steps
          tags: gdx-builder:latest # Nome da imagem local
          cache-from: type=gha # Habilita cache do GitHub Actions
          cache-to: type=gha,mode=max # Salva o cache para futuras execuções

      - name: Initialize Log File
        run: echo "Starting LibGDX Build Process - $(date)" > build_log.txt

      # Passo Atualizado com o script mais detalhado
      - name: Create LibGDX Project Structure
        # Adiciona um ID para facilitar a referência se necessário (opcional)
        id: create_project
        run: |
          echo "--- Creating LibGDX Project ---" | tee -a build_log.txt
          # Executa o docker run e captura o código de saída
          docker run --rm \
            -v "$(pwd):/github/workspace" \
            -w /github/workspace \
            gdx-builder:latest \
            bash -c '
            # Remover "set -e" temporariamente para garantir que vejamos todos os logs
            # set -e pipefail

            echo "[Container] Workspace permissions:" | tee -a /github/workspace/build_log.txt
            ls -ld /github/workspace | tee -a /github/workspace/build_log.txt

            echo "[Container] Starting Xvfb..." | tee -a /github/workspace/build_log.txt
            Xvfb :99 -screen 0 1024x768x16 &
            XVFB_PID=$!
            echo "[Container] Xvfb PID: $XVFB_PID" | tee -a /github/workspace/build_log.txt
            export DISPLAY=:99
            # Aumentar o tempo de espera para garantir que o Xvfb inicie
            echo "[Container] Sleeping for 10 seconds..." | tee -a /github/workspace/build_log.txt
            sleep 10

            echo "[Container] Checking Xvfb process..." | tee -a /github/workspace/build_log.txt
            ps aux | grep Xvfb | grep -v grep || echo "[Container] Xvfb process potentially not running!"

            echo "[Container] Running gdx-liftoff..." | tee -a /github/workspace/build_log.txt
            # Execute java e capture explicitamente stdout e stderr para o log
            java -jar /usr/local/bin/gdx-liftoff.jar \
              --dir . \
              --project "MyGdxGame" \
              --package "com.mygdx.game" \
              --mainClass "Main" \
              --sdk "${ANDROID_SDK_ROOT}" \
              --platforms "android" "desktop" \
              --androidApi "${ANDROID_API_LEVEL}" \
              --extensions=[] \
              --nonInteractive \
              --gdxVersion "1.12.1" \
              >> /github/workspace/build_log.txt 2>&1 # Redireciona stdout e stderr para o arquivo de log

            LIFTOFF_EXIT_CODE=$?
            echo "[Container] gdx-liftoff exited with code: $LIFTOFF_EXIT_CODE" | tee -a /github/workspace/build_log.txt

            # Verifica se o diretório foi criado
            if [ -d "MyGdxGame" ]; then
              echo "[Container] Project directory MyGdxGame found. Listing files:" | tee -a /github/workspace/build_log.txt
              tree MyGdxGame | tee -a /github/workspace/build_log.txt
            else
              echo "[Container] ERROR: Project directory MyGdxGame NOT found!" | tee -a /github/workspace/build_log.txt
              echo "[Container] Listing current directory contents:" | tee -a /github/workspace/build_log.txt
              ls -la | tee -a /github/workspace/build_log.txt
            fi

            echo "[Container] Killing Xvfb..." | tee -a /github/workspace/build_log.txt
            kill $XVFB_PID || echo "[Container] Failed to kill Xvfb PID $XVFB_PID (may have already exited)."

            # Sai do script bash com o código de saída do gdx-liftoff
            exit $LIFTOFF_EXIT_CODE
            '
          # Captura o código de saída do comando docker run
          DOCKER_EXIT_CODE=$?
          echo "Docker run command finished with exit code: $DOCKER_EXIT_CODE"

          # Força a etapa a falhar se o docker run falhou
          if [ $DOCKER_EXIT_CODE -ne 0 ]; then
            echo "::error::Docker run failed with exit code $DOCKER_EXIT_CODE"
            exit $DOCKER_EXIT_CODE
          fi

      - name: Compile Android APK (Debug)
        run: |
          echo "--- Compiling Android APK ---" | tee -a build_log.txt
          docker run --rm \
            -v "$(pwd):/github/workspace" \
            -w /github/workspace/MyGdxGame \
            gdx-builder:latest \
            bash -c 'set -e pipefail # Fail fast on errors

            echo "Making gradlew executable..." | tee -a /github/workspace/build_log.txt
            chmod +x ./gradlew

            echo "Running Gradle build..." | tee -a /github/workspace/build_log.txt
            ./gradlew android:assembleDebug \
              2>&1 | tee -a /github/workspace/build_log.txt # Redireciona stdout e stderr

            echo "Build finished. Listing generated APK:" | tee -a /github/workspace/build_log.txt
            tree android/build/outputs/apk/debug | tee -a /github/workspace/build_log.txt || echo "APK not found at expected location."
            '

      - name: Package Project Structure (Optional)
        if: success() # Executa apenas se os passos anteriores foram bem-sucedidos
        run: |
          echo "--- Packaging Project Structure ---" | tee -a build_log.txt
          zip -r project_structure.zip MyGdxGame \
            -x "MyGdxGame/android/build/*" \
            -x "MyGdxGame/android/.gradle/*" \
            -x "MyGdxGame/desktop/build/*" \
            -x "MyGdxGame/.gradle/*" \
            -x "MyGdxGame/.idea/*" \
            -x "*.iml" \
          | tee -a build_log.txt
          echo "Project structure packaged into project_structure.zip" | tee -a build_log.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gdx-build-artifacts
          path: |
            MyGdxGame/android/build/outputs/apk/debug/*.apk
            build_log.txt
            project_structure.zip # Inclua se a etapa de empacotamento for usada
          retention-days: 7 # Dias para manter os artefatos (ajuste conforme necessário)